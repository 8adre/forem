<button class="btn btn-primary ml-7" type="button" onclick="onModalOpen()" id="nav-link-button">
  Add Navigation Link
</button>

<div id="add-navigation-link-modal" class="hidden">
  <div class="crayons-modal crayons-modal--l">
    <div class="crayons-modal__box">
      <header class="crayons-modal__box__header">
        <h2>Add Navigation Link</h2>
        <button type="button" onclick="onModalClose()" class="crayons-btn crayons-btn--icon crayons-btn--ghost">
          <svg width="24" height="24" viewBox="0 0 24 24" class="crayons-icon" xmlns="http://www.w3.org/2000/svg">
            <path d="M12 10.586l4.95-4.95 1.414 1.414-4.95 4.95 4.95 4.95-1.414 1.414-4.95-4.95-4.95 4.95-1.414-1.414 4.95-4.95-4.95-4.95L7.05 5.636l4.95 4.95z" />
          </svg>
        </button>
      </header>
      <div class="crayons-modal__box__body">
        <div class="form-group grid p-6 mb-6 gap-1">
          <div class="form-group grid p-6 mb-6 gap-1">
            <%= form_for(NavigationLink.new, url: admin_navigation_links_path) do |form| %>
              <%= render "form", form: form %>
              <%= form.submit "Add link", class: "crayons-btn" %>
            <% end %>
          </div>
        </div>
      </div>
    </div>
    <div class="crayons-modal__overlay"></div>
  </div>
</div>

<script>
  let currentFocusTrapListener;

  function onModalOpen() {
    document.getElementById('add-navigation-link-modal').classList.remove('hidden')
    trapFocus(document.getElementsByClassName('crayons-modal')[0]);
  }

  function onModalClose() {
    document.getElementById('add-navigation-link-modal').classList.add('hidden')
    document.getElementById('nav-link-button').focus();
    document.getElementsByClassName('crayons-modal')[0].removeEventListener('keydown', currentFocusTrapListener);
    currentFocusTrapListener = null;
  }

  function trapFocus(element) {
    const focusableEls = element.querySelectorAll('a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type="text"]:not([disabled]), input[type="radio"]:not([disabled]), input[type="checkbox"]:not([disabled]), select:not([disabled])');
    const firstFocusableEl = focusableEls[0];

    firstFocusableEl.focus();

    const lastFocusableEl = focusableEls[focusableEls.length - 1];
    const KEYCODE_TAB = 9;
    const KEYCODE_ESC = 27;

    currentFocusTrapListener = function(e) {
      const isTabPressed = (e.key === 'Tab' || e.keyCode === KEYCODE_TAB);
      const isEscapePressed = (e.key === 'Escape' || e.keyCode === KEYCODE_ESC);

      if(isEscapePressed) {
        onModalClose();
      }

      if (!isTabPressed) {
        return;
      }

      if ( e.shiftKey ) /* shift + tab */ {
        if (document.activeElement === firstFocusableEl) {
          lastFocusableEl.focus();
            e.preventDefault();
          }
        } else /* tab */ {
        if (document.activeElement === lastFocusableEl) {
          firstFocusableEl.focus();
            e.preventDefault();
          }
        }
    };

    element.addEventListener('keydown', currentFocusTrapListener)
  }

</script>
